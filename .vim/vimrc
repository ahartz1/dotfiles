" Required Starting Settings ---------------------------------------------- {{{1
set nocompatible              " be iMproved, required


" Plugin Management ------------------------------------------------------- {{{1
"
" Pass a path where Plug should install plugins
call plug#begin('~/.vim/bundle')

" Load Plug help
Plug 'junegunn/vim-plug'

" NERDTree plugin
Plug 'scrooloose/nerdtree'

" NERD Commenter
Plug 'scrooloose/nerdcommenter'

" Solarized color scheme for Airline
Plug 'vim-airline/vim-airline-themes'

" python-mode plugin
Plug 'klen/python-mode', { 'for': ['python'] }

" Airline (alternate vim-only version of now depricated vim-powerline)
Plug 'vim-airline/vim-airline'

" Git plugin to allow branch info to show
Plug 'tpope/vim-fugitive'

" Git plugin to indicate lines with changes
Plug 'airblade/vim-gitgutter'

" vim-obsession to make Session.vim better
Plug 'tpope/vim-obsession'

" vim-surround to work with HTML, XML, etc.
Plug 'tpope/vim-surround'

" vim-unimpaired to quickly toggle and navigate
Plug 'tpope/vim-unimpaired'

" vim-repeat to give repeatability to vim-surround, vim-unimpaired, and others
Plug 'tpope/vim-repeat'

" Editor Config to use file to set formatting per project
" requires: editorconfig (via npm)
Plug 'editorconfig/editorconfig-vim'

" syntastic linter
" Plug 'scrooloose/syntastic'

" ALE (Asynchronous Lint Engine)
Plug 'w0rp/ale'

" CtrlP Fuzzy Finder
" Plug 'ctrlpvim/ctrlp.vim'

" Command-T (Fuzzy Finder)
Plug 'wincent/command-t'

" ack.vim
" Note that this requires ack (`brew install ack`)
Plug 'mileszs/ack.vim'

" Debugger (supports DBGP protocol)
Plug 'joonty/vdebug'

" Emmet support for ease of writing html
Plug 'mattn/emmet-vim'

" GraphQL syntax support
Plug 'jparise/vim-graphql', { 'for': ['graphql'] }

" javascript syntax highlighting
Plug 'pangloss/vim-javascript', { 'for': ['javascript', 'js', 'jsx'] }

" jsx support
Plug 'mxw/vim-jsx', { 'for': ['javascript', 'js', 'jsx'] }

" json syntax highlighting
Plug 'elzr/vim-json', { 'for': ['json'] }

" json5 syntax highlighting, too!
Plug 'GutenYe/json5.vim', { 'for': ['json', 'json5'] }

" vim-prettier to automatically format (html requires prettier ^1.15)
Plug 'prettier/vim-prettier', {
  \ 'for': [
  \     'css',
  \     'graphql',
  \     'html',
  \     'javascript',
  \     'json',
  \     'less',
  \     'markdown',
  \     'scss',
  \     'typescript',
  \     'vue',
  \ ]
  \}

" phpcomplete for improved omni-completion in PHP. Use <C-x><C-o>
Plug 'shawncplus/phpcomplete.vim', { 'for': ['php'] }

" phpfolding for automatically creating folds in PHP code
Plug 'rayburgemeestre/phpfolding.vim', { 'for': ['php'] }

" php syntax highlighting
Plug 'stanangeloff/php.vim', { 'for': ['php'] }

" php blade syntax highlighting
Plug 'jwalton512/vim-blade', { 'for': ['php', 'blade'] }

" python syntax support
Plug 'hdima/python-syntax', { 'for': ['python'] }

" typescript syntax support
Plug 'leafgarland/typescript-vim', { 'for': ['typescript' ] }

" To navigate into Ruby source/gem files with Vim:
" https://chodounsky.net/2016/12/09/using-tags-to-browse-ruby-and-gem-source-with-vim/
"
" gem install gem-ctags
" gem ctags
"
" mkdir -p ~/.rbenv/plugins
" git clone git://github.com/tpope/rbenv-ctags.git \
"   ~/.rbenv/plugins/rbenv-ctags
" rbenv ctags

" Bundler support (Ruby)
Plug 'tpope/vim-bundler', { 'for': ['ruby'] }

" rails support (Ruby)
Plug 'tpope/vim-rails', { 'for': ['ruby'] }

" rbenv support (Ruby)
Plug 'tpope/vim-rbenv', { 'for': ['ruby'] }

" Ruby support
Plug 'vim-ruby/vim-ruby', { 'for': ['ruby'] }

" Vim Mustache
Plug 'mustache/vim-mustache-handlebars', { 'for': ['mustache'] }

" Twig.vim
Plug 'nelsyeung/twig.vim', { 'for': ['twig'] }

" The following are examples of different formats supported.
" Keep Plug commands between plug#begin/end.
" plugin on GitHub repo
" Plug 'tpope/vim-fugitive'
" " Git plugin not hosted on GitHub
" Plug 'git://git.wincent.com/command-t.git'
" " git repos on your local machine (i.e. when working on your own plugin)
" Plug 'file:///home/gmarik/path/to/plugin'
" " The sparkup vim script is in a subdirectory of this repo called vim.
" " Pass the path to set the runtimepath properly.
" Plug 'rstacruz/sparkup', {'rtp': 'vim/'}
" " Avoid a name conflict with L9
" Plug 'user/L9', {'name': 'newL9'}
"
" All of your Plugins must be added before the following line
call plug#end()            " required

"
" Brief help
" :PlugInstall    - installs plugins
" :PlugUpdate
" :PlugClean      - confirms removal of unused plugins
" :PlugStatus     - check the status of plugins

" See :h plug for more details or wiki for FAQ


" Color Settings ---------------------------------------------------------- {{{1
"
" Partial fix for solarized when terminal colors not set to Solarized
if $ITERM_PROFILE !~? 'solarized'
    let g:solarized_termcolors=256
endif

if $ITERM_PROFILE =~? 'light'
    set background=light
else
    set background=dark
endif

colorscheme solarized
let g:airline_theme = 'solarized'

" Allow background color changes to also work in tmux
if &term =~ '256color'
    set t_ut=
endif


" General Vim Settings ---------------------------------------------------- {{{1
"
" Allow vim's own fuzzy find to work
set path+=**

" If in dotfiles, add relevant hidden directories to path (use :find).
if (getcwd() == $HOME."/.dotfiles")
    set path+=$HOME/.dotfiles/.bash
    set path+=$HOME/.dotfiles/.tmux
    set path+=$HOME/.dotfiles/.vim
endif

" When looking for files (default style, not CtrlP), visually display options
set wildmenu

" Enable syntax highlighting
syntax on

" Don't ever use swapfiles
set noswapfile
" Centralize backups and undo history
if exists('$SUDO_USER')
    set nobackup
    set nowritebackup
    set noundofile
else
    set backupdir=~/.vim/backups
    " Uncomment this to use swapfiles (and unset noswapfile above)
    " set directory=~/.vim/swaps//
    if exists("&undodir")
        set undodir=~/.vim/undo
    endif
endif

" Make default clipboard the OS X clipboard (and unnamedplus for Linux)
set clipboard=unnamed,unnamedplus

" Enable the mouse
set mouse=a
if has("mouse_sgr")
    " enable resizing splits with mouse in tmux
    set ttymouse=sgr
elseif &term =~ '^screen'
    " tmux knows the extended mouse mode
    set ttymouse=xterm2
endif

" Enable line numbers
set number

" Always show status line
set laststatus=2

" Disable error bells
set noerrorbells

" Show the cursor position
set ruler

" Highlight the cursor line by default
set cursorline

" Allow deletion of existing characters in insert mode
set backspace=2

" Allow virtual edit in visual block mode
set virtualedit=block

" Show the filename in the window titlebar
set title

" Start scrolling three lines before the horizontal window border
set scrolloff=3

" Highlight matching pairs as you type: (), [], {}
set showmatch

" Search-as-you-type
set incsearch

" Case-insensitive searching
set ignorecase

" Case-sensitive if expression contains a capital letter
set smartcase

" Use highlighting for search matches (:nohlsearch to clear [or :noh])
set hlsearch

" Show tabs as '▸' followed by spaces
" set listchars=tab:▸\ ,eol:¬
set listchars=tab:▸\ ,trail:-

" Show the listchars by default
set list

" Set tabstop to 4 spaces
set tabstop=4

" Set the default actual tab key to 4 spaces
set softtabstop=4

" Set tab width to 4 spaces
" set shiftwidth=4

" Expand tabs into spaces
" set expandtab

" Make wrapped lines indent to match starting line
if exists('&breakindent')
    set breakindent
endif

" Set minimum window width to 88 (a.k.a. 'wiw')
set winwidth=88

" Open vertial splits to the right
set splitright

" Enable indenting based on filetype
filetype plugin indent on

" Time out on key codes (not mappings)
set ttimeoutlen=50

" Start file with open folds
set nofoldenable

" Allow J to remove comment character when joining lines
if v:version > 703
    set formatoptions+=j
endif

" Don't add extra space after '.', '?', and '!' when joining lines
set nojoinspaces

" Don't update the screen during macro playback
set lazyredraw

" Enable Vim to search for tags file in parent directories
set tags=tags;

" When searching for tags, always match case!
if exists('&tagcase')
    set tagcase=match
endif

" Toggle folds open/closed with space bar (ignore errors)
nnoremap <silent> <Space> :silent! normal! za<CR>

" Make omnicompletion better by selecting highlighted with Enter
set completeopt=longest,menuone
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Enable ability to load man pages in Vim (with ":Man")
runtime! ftplugin/man.vim

" Ctrl-U in insert mode deletes a lot. Use Ctrl-G u to first break undo, so
" that you can undo Ctrl-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>


" Gvim Settings ----------------------------------------------------------- {{{1
"
" Prevent blinking cursor
set guicursor+=a:blinkon0

" Make cursor shape an underline
set guicursor+=a:hor10

" Hide scrollbars
set guioptions-=r
set guioptions-=L


" FileType-Specific Settings ---------------------------------------------- {{{1
"
" To force hard tabs, set noexpandtab and don't set softtabstop
"   tabstop and shiftwidth should be set to the same value
" To force spaces instead of tabs, set expandtab and softtabstop
"   shiftwidth and softtabstop should be set to the same value
augroup filetypeSpecific
    autocmd!
    autocmd FileType crontab       setlocal nobackup nowritebackup
    autocmd FileType gitconfig     setlocal noexpandtab tabstop=4 shiftwidth=4
    autocmd FileType help          setlocal nonumber
    autocmd FileType html          setlocal noexpandtab tabstop=2 shiftwidth=2 noendofline binary
    autocmd FileType html.mustache setlocal noexpandtab tabstop=2 shiftwidth=2 noendofline binary
    autocmd FileType htmldjango    setlocal noexpandtab           shiftwidth=2
    autocmd FileType javascript    setlocal noexpandtab tabstop=2 shiftwidth=2 softtabstop=0
    autocmd FileType json          setlocal noexpandtab tabstop=2 shiftwidth=2
    autocmd FileType markdown      setlocal linebreak
    autocmd FileType php           setlocal noexpandtab tabstop=4 shiftwidth=4 foldmethod=manual colorcolumn=110
    autocmd FileType python        setlocal expandtab   tabstop=8 shiftwidth=4 softtabstop=4
    autocmd FileType ruby          setlocal expandtab   tabstop=2 shiftwidth=2 softtabstop=2
    autocmd FileType sass          setlocal noexpandtab tabstop=2 shiftwidth=2
    autocmd FileType scss          setlocal noexpandtab tabstop=2 shiftwidth=2
    autocmd FileType sh            setlocal expandtab   tabstop=2 shiftwidth=2 softtabstop=2
    autocmd FileType vim           setlocal expandtab   tabstop=4 shiftwidth=4 foldmethod=marker
augroup END


" Key Mappings ------------------------------------------------------------ {{{1
"
" Change <Leader> to ',' (comma)
let mapleader=","

" Change <LocalLeader> to '\' (backslash)
let maplocalleader="\\"

" Remap save (only if buffer has changed)
nnoremap <silent> <Leader>s :update<CR>

" Remap load
nnoremap <Leader>e :e!<CR>
nnoremap <Leader>E :Tabdo Windo e!<CR>

" Make 'Y' copy from current location to end of line
noremap Y y$

" Remap escape when in insert mode
inoremap jj <ESC>

" Toggle paste mode (retains incomming formatting)
" noremap <silent> <F2> :set paste!<CR>

" Make moving between windows easier
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" Make navigating between folds a bit nicer
nnoremap <silent> zj :normal! zj<CR> :call ReadingHeight()<CR>
nnoremap zk zkzz

" Avoid accidentally triggering the help when reaching for Escape
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" Make moving the cursor around in command mode like bash (Emacs)
cnoremap <C-a> <Home>
cnoremap <C-f> <Right>
cnoremap <C-b> <Left>
cnoremap <Esc>b <S-Left>
cnoremap <Esc>f <S-Right>

" * and # will search word under cursor, but won't immediately jump to first match
nnoremap <silent> * :keepjumps normal! mi*`i<CR>
nnoremap <silent> g* :keepjumps normal! mig*`i<CR>
nnoremap <silent> # :keepjumps normal! mi#`i<CR>
nnoremap <silent> g# :keepjumps normal! mig#`i<CR>

" Turn off highlighting of search
nnoremap <silent> <Leader>n :nohlsearch<CR>

" Search in PHP files
command! -nargs=+ Pgrep grep -rn --include={*.php,} <args>

" Search in all files
command! -nargs=+ Agrep grep -rn <args>

" Run ctags specifically for JavaScript
nnoremap <Leader>ctj :silent !ctags -R --fields=+laimS --languages=JavaScript .<CR>:redraw!<CR>

" Run ctags specifically for php
nnoremap <Leader>ctp :silent !ctags -R --fields=+laimS --languages=php .<CR>:redraw!<CR>

" Run ctags specifically for php
nnoremap <Leader>ctr :silent !ctags -R --fields=+laimS --languages=ruby .<CR>:redraw!<CR>

" Run ctags specifically for python
nnoremap <Leader>cty :silent !ctags -R --fields=+laimS --languages=python .<CR>:redraw!<CR>

" Switch to previously active tab with <Leader>l
let g:lasttab = 1
nnoremap <Leader>l :exe "tabn ".g:lasttab<CR>
augroup tabLeave
    autocmd!
    autocmd TabLeave * let g:lasttab = tabpagenr()
augroup END

" Switch to the last tab in the tabline
nnoremap <silent> <Leader>L :tabl<CR>

" Close a whole tab, no matter how many windows are in it
nnoremap <silent> <Leader>C :tabc<CR>

" Edit vimrc file
nnoremap <Leader>ve :vsplit $MYVIMRC<CR>

" Source vimrc file
nnoremap <silent> <Leader>vs :source $MYVIMRC<CR>:noh<CR>:AirlineRefresh<CR>

" Save a file that requires `sudo` after already editing it
cnoremap w!! w !sudo tee % >/dev/null

" Show the highlighting groups for the text under the cursor
noremap <S-F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
    \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
    \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Redraw the screen for when things look funky within one window
nnoremap <silent> <Leader>r :redraw!<CR>:AirlineRefresh<CR>

" Make all windows on all tabs equal size. Useful when things look funky on all tabs
nnoremap <silent> <Leader>R :Tabdo :500wincmd _<CR> :Tabdo :wincmd =<CR>

" Add a space on either side of the current cursor location
nnoremap <LocalLeader><Space> :execute "normal! i "<CR> :execute "normal! li "<CR>


" Macros and Registers ---------------------------------------------------- {{{1
"
" Change end-of-line digits (default is to add)
call setreg('d', 's/\d\+$/\=submatch(0)+')

" Example of how to save a macro
" let @q = ''


" User-Defined Functions -------------------------------------------------- {{{1
"
" Indent first instance of '=' to specified column. Allows optional second
" parameter to specify a pattern other than '='. Patterns are case-sensitive.
"
" Example: `:call AJIndent(30, ':')` with cursor on the desired line
" Note: Also works on lines of text in Visual mode
function! AJIndent(indent_column, ...)
    " If a pattern was specified, use it, otherwise use '='
    " (Uses ternary if-then-else expression; see `:help E109` for details.)
    let s:pattern = (a:0 > 0) ? a:1 : '='
    " Define string of spaces that should replace a tab
    let s:tab_to_space = repeat(' ', &tabstop)
    " Get the current line with spaces subsituted for tabs
    let s:line = substitute(getline(line('.')), '\t', s:tab_to_space, 'g')
    " Check if the pattern appears on this line
    let s:match_found = match(s:line, '\C' . s:pattern) + 1
    if s:match_found <= 0
        return
    endif
    " Check if the pattern appears before the specified indent column
    let s:match_locations = matchstrpos(s:line, '\C^.*' . s:pattern)
    if s:match_locations[2] >= a:indent_column
        " If so, make sure that only whitespace would be removed
        let s:between = matchstrpos(s:line, '\C\S\=\s*'. s:pattern)
        if s:between[1] + 1 >= a:indent_column
            echohl WarningMsg
            echom 'Line ' . line('.') .
                    \ ': Not enough whitespace before pattern occurs;' .
                    \ ' min column: ' . string(s:between[1] + 2)
            echohl None
            return
        endif
    endif
    " Perform the adding of spaces and subsequent removal of any excess
    execute 'normal! ' . s:match_found . '|' .
            \ a:indent_column . 'i ' .
            \ a:indent_column . '|dw'
endfunction
" Map this function to <Leader>i
nnoremap <Leader>i :call AJIndent()<Left>
vnoremap <Leader>i :call AJIndent()<Left>

" Mapping that allows for a count when switching to next tab. Needed
" because <count>gt will switch to a tab by its number.
function! AJNextTab(count)
    let lasttab = tabpagenr()
    if !a:count
        let a:count = 1;
    endif
    for i in range(1, a:count)
        exe "tabnext"
    endfor
    let g:lasttab = lasttab
endfunction
" Map this to g<C-t>
nnoremap <silent> g<C-t> :<C-u>exe "call AJNextTab(".(v:count ? v:count : "").")"<CR>

" Toggle background between solarized light and dark
function! BgToggle()
    if (&background == "light")
        let g:solarized_contrast="normal"
        set background=dark
    else
        let g:solarized_contrast="high"
        set background=light
    endif
endfunction
" Map this function to <F9>
nnoremap <silent> <F9> :call BgToggle()<CR>

" Move current line to be a nice reading height from top of window
function! ReadingHeight()
    execute "normal! zt" . float2nr(winheight(0)/8.0) . ""
endfunction
" Have z. put the screen up at a nice reading level
nnoremap <silent> z. :call ReadingHeight()<CR>

function! OneDarkColors()
    let g:onedark_termcolors=256
    let g:onedark_terminal_italics=1
    colorscheme onedark
    let g:airline_theme='onedark'
    execute "normal! :AirlineRefresh\<CR>"
endfunction
nnoremap <silent> <LocalLeader>1 :call OneDarkColors()<CR>

function! DefaultiTerm2()
    colorscheme atom-dark-256
    let g:airline_theme='powerlineish'
    execute "normal! :AirlineRefresh\<CR>"
endfunction
nnoremap <silent> <LocalLeader>2 :call DefaultiTerm2()<CR>

" Like windo but restore the current window.
" (credit: https://vim.fandom.com/wiki/Run_a_command_in_multiple_buffers)
function! WinDo(command)
    let currwin=winnr()
    execute 'windo ' . a:command
    execute currwin . 'wincmd w'
endfunction
com! -nargs=+ -complete=command Windo call WinDo(<q-args>)

" Like tabdo but restore the current tab
function! TabDo(command)
    let currTab=tabpagenr()
    execute 'tabdo ' . a:command
    execute 'tabn ' . currTab
endfunction
com! -nargs=+ -complete=command Tabdo call TabDo(<q-args>)


" Load Local Settings ----------------------------------------------------- {{{1
if filereadable(expand("~/.dotfiles/.vim/.vimrc_add_ons"))
    source ~/.dotfiles/.vim/.vimrc_add_ons
endif


" PLUGIN SETTINGS --------------------------------------------------------- {{{1
" Ack Settings ------------------------------------------------------------ {{{2
"
" Also see The_Silver_Searcher settings
" Start an Ack search
nnoremap <Leader>a :silent! Ack!<Space>-F<Space>

" Start an Ack search in a new tab
nnoremap <Leader>A :tabe<CR>:silent! Ack<Space>-F<Space>

" Modify default mappings to open result in middle of the screen
let g:ack_mappings = {
  \ "t":  "<C-W><CR><C-W>Tzz",
  \ "T":  "<C-W><CR><C-W>TzzgT<C-W>j",
  \ "o":  "<CR>zz",
  \ "O":  "<CR>zz<C-W><C-W>:ccl<CR>zz",
  \ "go": "<CR>zz<C-W>j",
  \ "h":  "<C-W><CR>zz<C-W>K",
  \ "H":  "<C-W><CR>zz<C-W>K<C-W>b",
  \ "v":  "<C-W><CR>zz<C-W>L<C-W>p<C-W>J<C-W>p",
  \ "gv": "<C-W><CR>zz<C-W>L<C-W>p<C-W>J",
  \}

" Airline Settings -------------------------------------------------------- {{{2
"
let g:airline_powerline_fonts = 1
" The below is now set in the color section above
" let g:airline_theme = 'solarized'
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#whitespace#mixed_indent_algo = 2
let g:airline#extensions#whitespace#checks = [ 'indent', 'trailing', 'mixed-indent-file' ]
" Hide the arrow for missing sections
" let g:airline_skip_empty_sections = 1

" To use fancy symbols for airline, uncomment the following lines and use a
" patched font (more info on the README.rst)
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_left_sep = '⮀'
let g:airline_left_alt_sep = '⮁'
let g:airline_right_sep = '⮂'
let g:airline_right_alt_sep = '⮃'
let g:airline_symbols.branch = '⭠'
let g:airline_symbols.readonly = '⭤'
let g:airline_symbols.linenr = '⭡'
let g:airline_symbols.maxlinenr = '☰'
let g:airline_symbols.dirty='*'

" ALE Settings ------------------------------------------------------------ {{{2
"
" Show warnings in statusline
let g:airline#extensions#ale#enabled = 1

" Show window with errors when they exist
let g:ale_open_list = 1

" Make the default window height 5 lines
let g:ale_list_window_size = 5

" Lint when text has changed, but only when in normal mode
let g:ale_lint_on_text_changed = 'normal'

" Configure linters for specific filetypes
let g:ale_linters = {
  \ 'graphql': [],
  \ 'javascript': ['eslint'],
  \}

" Command-T Settings ------------------------------------------------------ {{{2
"
" Allow dotfiles to be searched
let g:CommandTScanDotDirectories = 1
" let g:CommandTAlwaysShowDotFiles = 1
"
" Make selection highlight easier to see (in custom solarized.vim)
let g:CommandTHighlightColor = 'CommandTHighlightColor'
"
" If you don't want/have Ruby build
let g:CommandTFileScanner = 'find'
"
" Allow Esc to close the window
if &term =~ "xterm" || &term =~ "screen"       
  let g:CommandTCancelMap = ['<ESC>', '<C-c>'] 
endif                                          
"
" nnoremap <silent> <Leader>B :CommandTMRU<CR>
" nnoremap <silent> <Leader>t :CommandT<CR>
nnoremap <silent> <Leader>T :CommandTTag<CR>

" CtrlP Settings ---------------------------------------------------------- {{{2
"
" Also see The_Silver_Searcher settings
" Note: Refresh cache with <F5>
" let g:ctrlp_by_filename = 1
" let g:ctrlp_extensions = ['autoignore']
" let g:ctrlp_map = ''
" let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:10,results:30'
" " let g:ctrlp_open_new_file = 'h'
" let g:ctrlp_regexp = 1
" " let g:ctrlp_show_hidden = 1
" nnoremap <silent> <Leader>b :CtrlPBuffer<CR>
" nnoremap <silent> <Leader>t :CtrlP<CR>
" nnoremap <silent> <Leader>T :CtrlPTag<CR>

" Editor Config ----------------------------------------------------------- {{{2
"
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
let g:EditorConfig_exec_path = '~/.dotfiles/.vim/bundle/editorconfig-vim/plugin/editorconfig.vim'

" emmet Settings ---------------------------------------------------------- {{{2
"
" Set emmet leader key to <Leader>m; mnemonic is Markup
let g:user_emmet_leader_key='<Leader>m'
let g:user_emmet_settings = {
  \ 'html' : {
  \     'quote_char': "'",
  \ },
  \}

" Fugitive Settings ------------------------------------------------------- {{{2
"
" Run :Gblame
nnoremap <silent> <Leader>gb :Gblame<CR>

" Run :Gstatus
nnoremap <silent> <Leader>gs :Gstatus<CR>

" Run :Gcommit -v
nnoremap <silent> <Leader>gc :Gcommit -v<CR>

augroup fugitiveBuffers
    autocmd!
    autocmd BufReadPost fugitive://* set bufhidden=delete
augroup END

" vim-javascript Settings ------------------------------------------------- {{{2
"
let g:javascript_plugin_jsdoc = 1

" NERDCommenter Settings -------------------------------------------------- {{{2
"
let g:NERDSpaceDelims=1
let g:NERDTrimTrailingWhitespace=1

" NERDTree Settings ------------------------------------------------------- {{{2
"
" Toggle NERDTree display
nnoremap <silent> <Leader>d :NERDTreeToggle<CR>:redraw!<CR>
" Open NERDTree with the current file selected
nnoremap <silent> <Leader>f :NERDTreeFind<CR>:redraw!<CR>

" Show hidden files by default
let NERDTreeShowHidden=1

" Don't ask about deleting deleted/renamed buffers
let NERDTreeAutoDeleteBuffer=1

" Hide unnecessary UI
let NERDTreeMinimalUI=1

" Don't show these file types
let g:NERDTreeIgnore = ['\.pyc$', '\.pyo$']

let g:NERDTreeWinSize = 40
let g:NERDTreeDirArrows = 1
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'

" phpfolding Settings ----------------------------------------------------- {{{2
"
" Don't autofold
let g:DisableAutoPHPFolding = 1

" vim-prettier Settings --------------------------------------------------- {{{2
"
" Change key binding
nnoremap <LocalLeader>p <Plug>(Prettier)
nnoremap <silent> <Leader>gq :Prettier<CR>
let g:prettier#autoformat = 0

" PyMode Settings --------------------------------------------------------- {{{2
"
" Set python syntax highlighting to highest level
let python_highlight_all = 1

" Ignore lines that are too long
let g:pymode_lint_ignore = 'E501'

let g:pymode_rope = 1
let g:pymode_run_bind = '<Leader>pr'
let g:pymode_breakpoint_bind = '<Leader>pb'
let g:pymode_rope_show_doc_bind = '<Leader>pd'
let g:pymode_rope_goto_definition_bind = '<Leader>pg'
" let g:pymode_rope_goto_definition_cmd = 'new'
" let g:pymode_rope_rename_bind = '<leader>pr'
" let g:pymode_rope_module_to_package_bind = '<leader>p1p'
" let g:pymode_rope_extract_method_bind = '<leader>pm'
" let g:pymode_rope_extract_variable_bind = '<leader>pl'
" let g:pymode_rope_use_function_bind = '<leader>pu'
" let g:pymode_rope_move_bind = '<leader>pv'
" let g:pymode_rope_change_signature_bind = '<leader>ps'

" Syntastic Settings ------------------------------------------------------ {{{2
"
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_mode_map = {
  \ 'mode': 'active',
  \ 'passive_filetypes': ['python', 'html'],
  \}
let g:syntastic_html_tidy_ignore_errors = [
  \ '<html> attribute "lang" lacks value',
  \ '<a> attribute "href" lacks value',
  \ 'trimming empty <span>',
  \ 'trimming empty <h1>',
  \ '<div> attribute "{{^" lacks value',
  \ '<div> attribute "}}" lacks value',
  \ '<div> attribute "{{/" lacks value',
  \]
" see https://github.com/jaxbot/syntastic-react for details
" requires: eslint, babel-eslint, eslint-plugin-react (all via npm)
let g:syntastic_javascript_checkers = ['eslint']

" requires: sass-lint (via npm)
let g:syntastic_scss_checkers = ['sass_lint']
let g:syntastic_sass_sass_vars = '-I ' . getcwd()

" The_Silver_Searcher Settings -------------------------------------------- {{{2
"
" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
    " Use Ag over Grep
    set grepprg=ag\ --nogroup\ --nocolor

    " Use Ag over Ack
    let g:ackprg = 'ag --vimgrep'

    " Use ag in CtrlP for listing files. Lightning fast and respects
    " .gitignore
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

    " ag is fast enough that CtrlP doesn't need to cache
    let g:ctrlp_use_caching = 0
endif

" vdebug Settings --------------------------------------------------------- {{{2
"
let g:vdebug_options= {
  \ "port" : 9000,
  \ "server" : '',
  \ "timeout" : 20,
  \ "on_close" : 'detach',
  \ "break_on_open" : 0,
  \ "ide_key" : '',
  \ "path_maps" : {},
  \ "debug_window_level" : 0,
  \ "debug_file_level" : 0,
  \ "debug_file" : "",
  \ "watch_window_style" : 'expanded',
  \ "marker_default" : '⬦',
  \ "marker_closed_tree" : '▸',
  \ "marker_open_tree" : '▾',
  \}

" Vim Mustache Settings --------------------------------------------------- {{{2
"
let g:mustache_abbreviations = 1

" End PLUGIN SETTINGS }}}2


" PHP Syntax Overrides ---------------------------------------------------- {{{1
"
" This appears out of alphabetical order to ensure no interference
function! PhpSyntaxOverride()
    hi! def link phpDocTags  phpDefine
    hi! def link phpDocParam phpType
endfunction

augroup phpSyntaxOverride
    autocmd!
    autocmd FileType php call PhpSyntaxOverride()
augroup END
